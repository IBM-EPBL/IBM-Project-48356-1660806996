# -*- coding: utf-8 -*-
"""Assignment4(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EsA795RBOqWpj8yi2xf1zCg4zkFmW4Hu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as rcParams

df=pd.read_csv('/content/Mall_Customers.csv') #No Target Column - Unsupervised Machine Learning
df.head()

df = df.rename(columns = {'Annual Income (k$)': 'Annual_Income','Spending Score (1-100)': 'Spending_Score'})
df.head()

df.shape

df.info()

df.Gender.unique()

df.Age.unique()

df.Gender.value_counts()

"""Visualizations

Univariate Analysis
"""

sns.displot(df.Spending_Score)

plt.pie(df.Gender.value_counts(),[0,0.2],shadow='True',autopct="1%.1f%%")

sns.kdeplot(df.Age,color="red")

"""Bi-variate Analysis"""

sns.jointplot(df.Spending_Score,df.Age)

sns.scatterplot(df.Age,df.Annual_Income,color="green")

sns.lineplot(df.Gender,df.Spending_Score)
plt.xlabel('Gender')
plt.ylabel('Spending_Score')
plt.title('LinePlot')

"""Multi-variate Analysis"""

df.hist(figsize=(10,10))

sns.pairplot(df,kind='scatter',hue='Age')

sns.pairplot(data=df[['Age','Annual_Income','Spending_Score']],kind='kde',diag_kind='hist')

"""Descriptive statistics"""

df.describe()

"""
Handle missing data"""

df.isnull().any() #no missing data

"""
Outliers Replacement"""

sns.boxplot(df.Age) #no outliers

"""
Check for Categorical column and perform encoding
"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df.Gender=le.fit_transform(df.Gender)

df.head()

from sklearn import cluster

error =[]
for i in range(1,11):
    kmeans=cluster.KMeans(n_clusters=i,init='k-means++',random_state=0)
    kmeans.fit(df)
    error.append(kmeans.inertia_)

error

import matplotlib.pyplot as plt
plt.plot(range(1,11),error)
plt.title('Elbow method')
plt.xlabel('no of cluster')
plt.ylabel('error')
plt.show()

k_means_model=cluster.KMeans(n_clusters=3,init='k-means++',random_state=0)

k_means_model.fit(df)

clustered_data =k_means_model.predict(df)

"""Add the cluster data with the primary dataset"""

df['Clustered_data'] = pd.Series(clustered_data)
df.head()

"""Split the data into dependent and independent variables"""

y=df['Clustered_data']
y

X=df.drop(columns=['Clustered_data'],axis=1)
X.head()

"""Scale the independent variables"""

from sklearn.preprocessing import scale

data=pd.DataFrame(scale(X),columns=X.columns)
data.head()

"""Split the data into training and testing"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(data,y,test_size=0.3,random_state=1)

X_train.shape,X_test.shape

y_train.shape,y_test.shape

"""Build the model"""

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

model.fit(X_train,y_train)   # K - Nearest Neighbour model (KNN)

KNeighborsClassifier()

"""Train the model"""

pred_train = model.predict(X_train)
pred_train

"""
Test the data"""

y_test

pred_test=model.predict(X_test)
pred_test

pred = pd.DataFrame({'Actual_value':y_test,'Predicted_value_using_KNN':pred_test})
pred.head()

"""Measure the performance using metrics"""

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

#Accuracy Score
print('Training accuracy: ',accuracy_score(y_train,pred_train))
print('Testing accuracy: ',accuracy_score(y_test,pred_test))

#Confusion Matrix
pd.crosstab(y_test,pred_test)

#Classification Report
print(classification_report(y_test,pred_test))

